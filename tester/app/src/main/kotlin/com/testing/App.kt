/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.testing

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.linecorp.decaton.processor.TaskMetadata
import com.linecorp.decaton.processor.runtime.DecatonTask
import com.linecorp.decaton.processor.runtime.ProcessorProperties
import com.linecorp.decaton.processor.runtime.ProcessorsBuilder
import com.linecorp.decaton.processor.runtime.Property
import com.linecorp.decaton.processor.runtime.StaticPropertySupplier
import com.linecorp.decaton.processor.runtime.SubscriptionBuilder
import com.linecorp.decaton.processor.runtime.TaskExtractor
import org.apache.kafka.clients.consumer.ConsumerConfig
import java.util.Properties

fun main() {
    val properties = Properties().apply {
        setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092")
        setProperty(ConsumerConfig.GROUP_ID_CONFIG, "tester")
    }
    val mapper = jacksonObjectMapper()
    val subscription = SubscriptionBuilder.newBuilder("tester")
        .processorsBuilder(
            ProcessorsBuilder
                .consuming("fuzzer", TaskExtractor {
                    val metaData = TaskMetadata.builder().build()
                    val data = mapper.readValue(it, Event::class.java)
                    DecatonTask(metaData, data, it)
                })
                .thenProcess(FuzzerProcessor())
        )
        .consumerConfig(properties)
        .properties(
            StaticPropertySupplier.of(
                Property.ofStatic(
                    ProcessorProperties.CONFIG_PARTITION_CONCURRENCY,
                    50
                ),
                Property.ofStatic(
                    ProcessorProperties.CONFIG_MAX_PENDING_RECORDS,
                    2000
                )
            )
        )
        .buildAndStart()
    subscription.join()
}
